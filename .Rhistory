geom_point(aes(y=MeanMeanIntervalError), size = 2, color="black", data = intErrorsScene.agg, position=dodge1) +
geom_errorbar(aes(y=MeanMeanIntervalError, ymin=MeanMeanIntervalError-CIMeanIntervalError, ymax=MeanMeanIntervalError+CIMeanIntervalError), width = 0.2, color="black", data = intErrorsScene.agg, position=dodge1) +  # it says error bar has no y easthetic but without it it throws a different error..
facet_grid(.~FirstSceneTypeGraph) +
ylab("Mean Interval estimation error (ms)")
plot_intErrorScene
ggsave("plot_intErrorScene.png", plot_intErrorScene, dpi=300)
ggsave("plot_intErrorScene.png", plot_intErrorScene, dpi=300)
plot_intErrorScene
ggsave("plot_intErrorScene.png", plot_intErrorScene, dpi=300, width=10, height=8, units = "cm")
ggsave("plot_intErrorScene.png", plot_intErrorScene, dpi=300, width=15, height=12, units = "cm")
View(intErrorsScene)
plot_intErrorScene
intErrorsScene
intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>% unite(Subject, SceneType, FirstSceneTypeGraph) %>% gather(key=EventType, value=IntervalErrorMean)
intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>% unite(ID, Subject, SceneType, FirstSceneTypeGraph)
intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>% unite(ID, Subject, SceneType, FirstSceneTypeGraph) %>% gather(key=EventType, value=IntervalErrorMean)
intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>% unite(ID, Subject, SceneType, FirstSceneTypeGraph) %>% gather(key=ID, value=IntervalErrorMean)
intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>% unite(ID, Subject, SceneType, FirstSceneTypeGraph) %>% gather(key=ID, value=IntervalErrorMean)
intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>% unite(ID, Subject, SceneType, FirstSceneTypeGraph) %>% spread(key=EventType, value=IntervalErrorMean)
intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>% unite(ID, Subject, SceneType, FirstSceneTypeGraph) %>% spread(key=EventType, value=IntervalErrorMean) %>% mutate(AgencySize = Control-Action) %>% separate(ID)
intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>% unite(ID, Subject, SceneType, FirstSceneTypeGraph) %>% spread(key=EventType, value=IntervalErrorMean) %>% mutate(AgencySize = Control-Action) %>% separate(ID, c(Subject, SceneType, FirstSceneTypeGraph))
intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>% unite(ID, Subject, SceneType, FirstSceneTypeGraph) %>% spread(key=EventType, value=IntervalErrorMean) %>% mutate(AgencySize = Control-Action) %>% separate(ID, c("Subject", "SceneType", "FirstSceneTypeGraph"))
intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>% unite(ID, Subject, SceneType, FirstSceneTypeGraph, sep = ";") %>% spread(key=EventType, value=IntervalErrorMean) %>% mutate(AgencySize = Control-Action) %>% separate(ID, c("Subject", "SceneType", "FirstSceneTypeGraph"), sep = ";")
intErrorsScene.EventDiff <- intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>%
unite(ID, Subject, SceneType, FirstSceneTypeGraph, sep = ";") %>%
spread(key=EventType, value=IntervalErrorMean) %>%
mutate(AgencySize = Control-Action) %>%
separate(ID, c("Subject", "SceneType", "FirstSceneTypeGraph"), sep = ";")
intErrorsScene.EventDiff
intErrorsScene.EventDiff.agg <- intErrorsScene.EventDiff %>% group_by(SceneType, FirstSceneTypeGraph) %>%
intErrorsScene.EventDiff.agg <- intErrorsScene.EventDiff %>% group_by(SceneType, FirstSceneTypeGraph) %>%
summarise(NSubjects = n(), MeanMeanIntervalError = mean(IntervalErrorMean), MeanMedianIntervalError = mean(IntervalErrorMedian),
SDMeanIntervalError = sd(IntervalErrorMean)) %>%
mutate(SEMMeanIntervalError = SDMeanIntervalError / sqrt(NSubjects),
CIMeanIntervalError = SEMMeanIntervalError * abs(qt((1-0.95)/2, NSubjects-1)))
intErrorsScene.EventDiff.agg <- intErrorsScene.EventDiff %>% group_by(SceneType, FirstSceneTypeGraph) %>%
summarise(NSubjects = n(), MeanAgencySize = mean(AgencySize),
SDAgencySize = sd(AgencySize)) %>%
mutate(SEMAgencySize = SDAgencySize / sqrt(NSubjects),
CIAgencySize = SEMAgencySize * abs(qt((1-0.95)/2, NSubjects-1)))
intErrorsScene.EventDiff.agg
intErrorsScene.EventDiff %>%
ggplot(., aes(y=AgencySize, x=SceneType, color=SceneType, group=SceneType)) +
geom_violin(draw_quantiles = c(0.5), scale="count", data=intErrorsScene.EventDiff, position=dodge1)
intErrorsScene.EventDiff %>%
ggplot(., aes(y=AgencySize, x=SceneType, color=SceneType, group=SceneType)) +
geom_violin(draw_quantiles = c(0.5), scale="count", data=intErrorsScene.EventDiff, position=dodge1) +
#facet_grid(.~EventType) +
geom_point(aes(y=MeanAgencySize), size = 2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +
geom_errorbar(aes(y=MeanAgencySize, ymin=MeanAgencySize-CIAgencySize, ymax=MeanAgencySize+CIAgencySize), width = 0.2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +  # it says error bar has no y easthetic but without it it throws a different error..
facet_grid(.~FirstSceneTypeGraph) +
ylab("Agency size (Control-Action) [ms]")
plot_intErrorSceneEventDiff <- intErrorsScene.EventDiff %>%
ggplot(., aes(y=AgencySize, x=SceneType, color=SceneType, group=SceneType)) +
geom_violin(draw_quantiles = c(0.5), scale="count", data=intErrorsScene.EventDiff, position=dodge1) +
#facet_grid(.~EventType) +
geom_point(aes(y=MeanAgencySize), size = 2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +
geom_line(aes(y=MeanAgencySize), size = 2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +
geom_errorbar(aes(y=MeanAgencySize, ymin=MeanAgencySize-CIAgencySize, ymax=MeanAgencySize+CIAgencySize), width = 0.2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +  # it says error bar has no y easthetic but without it it throws a different error..
facet_grid(.~FirstSceneTypeGraph) +
ylab("Agency size (Control-Action) [ms]")
plot_intErrorSceneEventDiff
ggsave("plot_intErrorSceneEventDiff.png", plot_intErrorSceneEventDiff, dpi=300, width=15, height=12, units = "cm")
plot_intErrorSceneEventDiff <- intErrorsScene.EventDiff %>%
ggplot(., aes(y=AgencySize, x=SceneType, color=SceneType, group=SceneType)) +
geom_violin(draw_quantiles = c(0.5), scale="count", data=intErrorsScene.EventDiff, position=dodge1) +
#facet_grid(.~EventType) +
geom_point(aes(y=MeanAgencySize), size = 2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +
#geom_line(aes(y=MeanAgencySize), size = 2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +
geom_errorbar(aes(y=MeanAgencySize, ymin=MeanAgencySize-CIAgencySize, ymax=MeanAgencySize+CIAgencySize), width = 0.2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +  # it says error bar has no y easthetic but without it it throws a different error..
facet_grid(.~FirstSceneTypeGraph) +
ylab("Agency size (Control-Action) [ms]")
ggsave("plot_intErrorSceneEventDiff.png", plot_intErrorSceneEventDiff, dpi=300, width=15, height=12, units = "cm")
plot_intErrorSceneEventDiff
a <- seq(0,1,0.01)
b <- seq(0,1,0.01)
a*b
hist(a)
hist(a*b)
l = rep(0, times=100)
d = seq(0, 99, 1)
n = l+d
r = l/n
plot(r)
l = rep(0, times=1000)
d = seq(0, 9999, 1)
n = l+d
r = l/n
s = r*(1-1/n) + 1/n
plot(s)
plot(d, s)
l = rep(0, times=10000)
d = seq(0, 9999, 1)
n = l+d
r = l/n
s = r*(1-1/n) + 1/n
plot(d, s)
l = rep(0, times=100)
d = seq(0, 99, 1)
n = l+d
r = l/n
s = r*(1-1/n) + 1/n
plot(d, s)
s
s = r*(1-2/(n+1)) + 2/(n+1)
plot(d, s)
s
s = r*(1-2/(n+1)) + 2/(n+1)
s
l
d
r = (l+1)/(n+1)
s = r*(1-2/(n+1)) + 2/(n+1)
plot(d, s)
s
s = r*(1-2/(log(n)+1)) + 2/(log(n)+1)
plot(d, s)
s = r*(1-1/(log(n)+1)) + 1/(log(n)+1)
plot(d, s)
s = r*(1-1/(n+1)) + 1/(n+1)
plot(d, s)
s = r*(1-1/(log(n)+1)) + 1/(log(n)+1)
plot(d, s)
l = rep(0, times=1000)
d = seq(0, 999, 1)
n = l+d
r = (l+1)/(n+1)
s = r*(1-1/(log(n)+1)) + 1/(log(n)+1)
plot(d, s)
log(0:100)
s
s = r*(1-1/(log(n+1))) + 1/(log(n+1))
plot(d, s)
s = r*(1-1/(log(n+1)+1)) + 1/(log(n+1)+1)
plot(d, s)
l = seq(0, 999, 1)
d = rep(10, times=1000)
n = l+d
r = (l+1)/(n+1)
s = r*(1-1/(n+1)) + 1/(n+1)
plot(d, s)
plot(l, s)
plot(r, s)
l = rep(0, times=1000)
d = seq(0, 999, 1)
n = l+d
r = (l+1)/(n+1)
s = r*(1-1/(n+1)) + 1/(n+1)
s = r*(1-1/(log(n+1)+1)) + 1/(log(n+1)+1)
plot(r, s)
plot(d, s)
por <- 0.85/(1-0.85)
por
por <- 0.15/(1-0.15)
por
1/por
lor <- 0.8/(1-0.8)
lor
por*lor
postor <- por*lor
postor/(1+postor)
log(postor)
0.85*0.2
0.8 + 0.85*0.2
0.15*0.8
0.15*0.8 / (0.8 + 0.85*0.2)
0.12 / 0.97
0.15*0.8 + 0.85*0.2
0.15*0.8 / (0.15*0.8 + 0.85*0.2)
0.12 / 0.29
PrOR = 0.15/(1-0.15)
LOR = 0.8 / 0.2
PostOR = PrOR*LOR
PostOR
P(T=z|V=z) = PostOR/(1+PostOR)
PostOR/(1+PostOR)
library("sjlabelled", lib.loc="~/R/win-library/3.5")
library("sjmisc", lib.loc="~/R/win-library/3.5")
library("sjPlot", lib.loc="~/R/win-library/3.5")
library("sjstats", lib.loc="~/R/win-library/3.5")
install.packages(c("carData", "cli", "coda", "data.table", "digest", "dplyr", "emmeans", "evaluate", "fansi", "ggeffects", "ggplot2", "htmlwidgets", "maptools", "mime", "nloptr", "ps", "psych", "R6", "Rcpp", "reprex", "rlang", "rstudioapi", "sjPlot", "stringi", "survey", "tidyr", "tidyselect", "tinytex", "xfun"))
install.packages(c("foreign", "MASS", "Matrix", "mgcv", "survival"), lib="C:/Program Files/R/R-3.5.1/library")
install.packages(c("carData", "cli", "coda", "data.table", "digest", "dplyr", "emmeans", "evaluate", "fansi", "ggeffects", "ggplot2", "htmlwidgets", "maptools", "mime", "nloptr", "ps", "psych", "R6", "Rcpp", "reprex", "rlang", "rstudioapi", "sjPlot", "stringi", "survey", "tidyr", "tidyselect", "tinytex", "xfun"))
library(tidyverse)  #all basic functions
library(forcats) #working with factors
library(lubridate)  # working with dates
library(lme4) #mixed effects models
library(lmerTest) #mixed effects models pvalues
library(sjPlot) #liner models tables
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
intervalsLmer <- as.data.frame(data) %>% lme4::lmer(IntervalError ~ IntervalS + SceneType * EventType + (1+IntervalS + SceneType + EventType|Subject), .)
library(tidyverse)  #all basic functions
library(forcats) #working with factors
library(lubridate)  # working with dates
library(lme4) #mixed effects models
library(lmerTest) #mixed effects models pvalues
library(sjPlot) #liner models tables
datapath <- file.path(getwd(), "Data", "Main")
datafilepattern <- "BildAkt.*\\.csv"
#ggplot2 theme
#old_theme <- theme_set(theme_grey())
datafiles <- list.files(datapath, datafilepattern, full.names = T)
rawdata <- do.call(rbind, lapply(datafiles, read_delim, delim=";")) # read all files and combine them into one tibble
rawdata <- rawdata %>% mutate(firstSceneType = parse_factor(firstSceneType, c("3D", "2D")),
firstEventType = parse_factor(firstEventType, c("Action", "Control")),
isPracticeBlock = as.logical(isPracticeBlock),
sceneType = parse_factor(setupType, c("3D", "2D")),
eventType = parse_factor(eventType, c("Action", "Control")),
experimentTime = ymd_hms(experimentTime),
subject = as.numeric(subject)
)
rawdata <- rawdata %>% mutate(subject = case_when(experimentTime == ymd_hms("2018-01-17_12-56-08") ~ 17,
experimentTime == ymd_hms("2018-01-22_13-19-47") ~ 24,
experimentTime == ymd_hms("2018-01-22_14-59-19") ~ 25,
TRUE ~ subject)
)
rawdata %>% arrange(subject) %>% count(subject)
data <- rawdata %>% filter(isPracticeBlock == FALSE) %>%
select(Subject = subject,
Session = session,
FirstSceneType = firstSceneType,
FirstEventType = firstEventType,
Block = blockNo,
SceneType = sceneType,
EventType = eventType,
TrialBlock = trialNoInBlock,
TrialTotal = trialNoTotal,
ObjectsCount = noObjects,
ObjectsResp = responseObjectsNo,
Interval = interval,
IntervalResp = responseInterval,
TSTrialOnset = trialOnsetTimestamp,
TSObjectsResp = responseObjectsTimestamp,
TSEvent = eventTimestamp,
TSTone = toneTimestamp, ##TSTone = TSEvent, is recorded when sending the command playDelayed to produce the tone after a specified interval, so tone in fact occurs later, at an uknown time, but roughly TSTone + Interval
TSIntervalResp = responseIntervalTimestamp
) %>% mutate(
IntervalS = sjmisc::std(Interval),
ObjectsRT = TSObjectsResp - TSTrialOnset,
ObjectsLogRT = log(ObjectsRT),
ObjectsError = ObjectsResp - ObjectsCount,
ObjectsAcc = if_else(ObjectsError==0, 1, 0),
IntervalError = IntervalResp - Interval,
#IntervalRT = TSIntervalResp - (TSTone), #correct? apparently, no need to adjust the RT by Interval?? it just gets regressed out...
IntervalRT = TSIntervalResp - (TSEvent + Interval),
IntervalLogRT = log(IntervalRT),
FirstSceneTypeGraph = recode(FirstSceneType, `2D` = "Started_with_2D", `3D` = "Started_with_3D"),
FirstEventTypeGraph = recode(FirstEventType, `Action` = "Started_with_Action", `Control` = "Started_with_Control")
)
data #preview
# Are interval errors approx normally distributed?
data %>% ggplot(., aes(x=IntervalError, linetype=SceneType, color=EventType)) +
facet_wrap(~Subject) +
geom_freqpoly(bins=15) #geom_density(alpha=0.3)
# First level aggregation, over trials
intErrors <- data %>% group_by(Subject, SceneType, EventType) %>%
summarize(NTrials = n(), IntervalErrorMean = mean(IntervalError), IntervalErrorMedian = median(IntervalError), IntervalErrorAbsMean = mean(abs(IntervalError)), IntervalErrorSD = sd(IntervalError), IntervalErrorCor = cor(Interval,IntervalResp))
# Second level aggregation, over subjects
intErrors.agg <- intErrors %>% group_by(SceneType, EventType) %>%
summarise(NSubjects = n(), MeanMeanIntervalError = mean(IntervalErrorMean), MeanMedianIntervalError = mean(IntervalErrorMedian),
SDMeanIntervalError = sd(IntervalErrorMean)) %>%
mutate(SEMMeanIntervalError = SDMeanIntervalError / sqrt(NSubjects),
CIMeanIntervalError = SEMMeanIntervalError * abs(qt((1-0.95)/2, NSubjects-1))
)
# Plot interval estimation accuracy per conditions
dodge1 <- position_dodge(width=1)
intErrors %>%
ggplot(., aes(y=IntervalErrorMean, x=EventType, color=SceneType, group=interaction(SceneType, EventType))) +
geom_violin(draw_quantiles = c(0.5), scale="count", data=intErrors, position=dodge1) +
#facet_grid(.~EventType) +
geom_point(aes(y=MeanMeanIntervalError), size = 2, color="black", data = intErrors.agg, position=dodge1) +
geom_errorbar(aes(y=MeanMeanIntervalError, ymin=MeanMeanIntervalError-CIMeanIntervalError, ymax=MeanMeanIntervalError+CIMeanIntervalError), width = 0.2, color="black", data = intErrors.agg, position=dodge1) +  # it says error bar has no y easthetic but without it it throws a different error..
ylab("Mean Interval estimation error (ms)")
#geom_errorbar(aes(ymin=-100, ymax=100),  data = intErrors.agg, position=dodge1)
intErrorsInt <- data %>% group_by(Subject, SceneType, EventType, Interval) %>%
summarize(NTrials = n(), IntervalErrorMean = mean(IntervalError), IntervalErrorMedian = median(IntervalError), IntervalErrorAbsMean = mean(abs(IntervalError)), IntervalErrorSD = sd(IntervalError))
intErrorsInt.agg <- intErrorsInt %>% group_by(SceneType, EventType, Interval) %>%
summarise(NSubjects = n(), MeanMeanIntervalError = mean(IntervalErrorMean), MeanMedianIntervalError = mean(IntervalErrorMedian),
SDMeanIntervalError = sd(IntervalErrorMean)) %>%
mutate(SEMMeanIntervalError = SDMeanIntervalError / sqrt(NSubjects),
CIMeanIntervalError = SEMMeanIntervalError * abs(qt((1-0.95)/2, NSubjects-1))
)
# Accuracy per interval and conditions plot
dodge <- position_dodge(width=20)
intErrorsInt.agg %>%  ggplot(., aes(x=Interval, y=MeanMeanIntervalError, color=SceneType, shape=SceneType, group=interaction(EventType, SceneType))) +
geom_point(position = dodge) + geom_line(aes(linetype=EventType), position = dodge) +
geom_errorbar(width = 10, position = dodge, aes(ymin = MeanMeanIntervalError - CIMeanIntervalError, ymax = MeanMeanIntervalError + CIMeanIntervalError)) +
scale_x_continuous(breaks=c(150, 350, 550, 750))
intervalsLmer <- as.data.frame(data) %>% lme4::lmer(IntervalError ~ IntervalS + SceneType * EventType + (1+IntervalS + SceneType + EventType|Subject), .)
#summary(intervalsLmer)
#include also objects error: how inaccurate a person was in absolute numbers
intervalsOELmer <- as.data.frame(data) %>% lme4::lmer(IntervalError ~ IntervalS + SceneType * EventType + abs(ObjectsError) + ObjectsCount * ObjectsRT + IntervalLogRT + TrialTotal + (1+IntervalS+SceneType + EventType|Subject), .)
#summary(intervalsOELmer)
tab_model(intervalsLmer, intervalsOELmer, p.val = "wald", file="intervalsLmer.html")# We have to save the table in html format.
htmltools::includeHTML("intervalsLmer.html") #And include it later - not needed for html_document type, only for notebook
data %>% ggplot(., aes(y=IntervalError, x=TrialTotal)) +
geom_point() + geom_smooth() +
facet_grid(EventType ~ SceneType)
data %>% ggplot(., aes(y=IntervalError, x=IntervalLogRT)) +
geom_point() + geom_smooth() +
facet_grid(EventType ~ SceneType)
# How many such incorrect object counts are there?
objErrorsCounts <- data %>% #mutate(ObjectsAcc = if_else(ObjectsError==0, 1, 0)) %>%
group_by(Subject, SceneType, EventType, ObjectsAcc) %>%
summarize(NTrials = n()) %>%
ungroup() %>%
group_by(SceneType, EventType, ObjectsAcc) %>%
summarise(TrialsSum = sum(NTrials), TrialsMean = mean(NTrials), TrialsMedian = median(NTrials))
# Detect outlier trials w/r to objects RT
data %>% filter(ObjectsAcc == 1) %>%
ggplot(., aes(x=log(ObjectsRT))) +
geom_histogram()
OUTLIER_SD_CUTOFF = 2
indivObjectsRTs <- data %>% filter(ObjectsAcc == 1) %>%
group_by(Subject) %>%
summarize(ObjectsLogRTMean = mean(ObjectsLogRT), ObjectsLogRTSD = sd(ObjectsLogRT)) %>%
mutate(ObjectsLogRTLower = ObjectsLogRTMean - ObjectsLogRTSD * OUTLIER_SD_CUTOFF,
ObjectsLogRTUpper = ObjectsLogRTMean + ObjectsLogRTSD * OUTLIER_SD_CUTOFF)
data_out <- data %>%
left_join(indivObjectsRTs, by = "Subject") %>%
#mutate(Exclude = ObjectsLogRT > ObjectsLogRTUpper & ObjectsLogRT < ObjectsLogRTLower) %>%  # within SD bounds
mutate(Exclude = ObjectsLogRT < ObjectsLogRTMean) %>%  # above average
filter(Exclude == FALSE & ObjectsAcc == 1) %>%
filter(ObjectsCount > 8.5) # above mean number of objects
nrow(data)
nrow(data_out)
# First level aggregation, over trials
intErrors_out <- data_out %>% group_by(Subject, SceneType, EventType) %>%
summarize(NTrials = n(), IntervalErrorMean = mean(IntervalError), IntervalErrorMedian = median(IntervalError), IntervalErrorAbsMean = mean(abs(IntervalError)), IntervalErrorSD = sd(IntervalError), IntervalErrorCor = cor(Interval,IntervalResp))
# Second level aggregation, over subjects
intErrors_out.agg <- intErrors_out %>% group_by(SceneType, EventType) %>%
summarise(NSubjects = n(), MeanMeanIntervalError = mean(IntervalErrorMean), MeanMedianIntervalError = mean(IntervalErrorMedian),
SDMeanIntervalError = sd(IntervalErrorMean)) %>%
mutate(SEMMeanIntervalError = SDMeanIntervalError / sqrt(NSubjects),
CIMeanIntervalError = SEMMeanIntervalError * abs(qt((1-0.95)/2, NSubjects-1))
)
# Plot interval estimation accuracy per conditions
dodge1 <- position_dodge(width=1)
intErrors_out %>%
ggplot(., aes(y=IntervalErrorMean, x=EventType, color=SceneType, group=interaction(SceneType, EventType))) +
geom_violin(draw_quantiles = c(0.5), scale="count", data=intErrors, position=dodge1) +
#facet_grid(.~EventType) +
geom_point(aes(y=MeanMeanIntervalError), size = 2, color="black", data = intErrors_out.agg, position=dodge1) +
geom_errorbar(aes(y=MeanMeanIntervalError, ymin=MeanMeanIntervalError-CIMeanIntervalError, ymax=MeanMeanIntervalError+CIMeanIntervalError), width = 0.2, color="black", data = intErrors.agg, position=dodge1) +  # it says error bar has no y easthetic but without it it throws a different error..
ylab("Mean Interval estimation error (ms)")
#geom_errorbar(aes(ymin=-100, ymax=100),  data = intErrors.agg, position=dodge1)
intErrorsObjects_out <- data_out %>% group_by(Subject, SceneType, EventType, ObjectsCount) %>%
summarize(NTrials = n(), IntervalErrorMean = mean(IntervalError), IntervalErrorMedian = median(IntervalError), IntervalErrorAbsMean = mean(abs(IntervalError)), IntervalErrorSD = sd(IntervalError))
intErrorsObjects_out.agg <- intErrorsObjects_out %>% group_by(SceneType, EventType, ObjectsCount) %>%
summarise(NSubjects = n(), MeanMeanIntervalError = mean(IntervalErrorMean), MeanMedianIntervalError = mean(IntervalErrorMedian),
SDMeanIntervalError = sd(IntervalErrorMean)) %>%
mutate(SEMMeanIntervalError = SDMeanIntervalError / sqrt(NSubjects),
CIMeanIntervalError = SEMMeanIntervalError * abs(qt((1-0.95)/2, NSubjects-1))
)
# Accuracy per interval and conditions plot
dodge02 <- position_dodge(width=0.2)
intErrorsObjects_out.agg %>%  ggplot(., aes(x=ObjectsCount, y=MeanMeanIntervalError, color=SceneType, shape=SceneType, group=interaction(EventType, SceneType))) +
geom_point(position = dodge02) + geom_line(aes(linetype=EventType), position = dodge02) +
geom_errorbar(width = 0.3, position = dodge02, aes(ymin = MeanMeanIntervalError - CIMeanIntervalError, ymax = MeanMeanIntervalError + CIMeanIntervalError)) #+
#scale_x_continuous(breaks=c(150, 350, 550, 750))
intervalsOutLmer <- as.data.frame(data_out) %>% lmer(IntervalError ~ IntervalS + SceneType * EventType + (1+IntervalS + SceneType + EventType|Subject), .)
intervalsOutLmer <- data_out %>% mutate(IntervalS = IntervalS) %>% as.data.frame() %>% lmer(IntervalError ~ IntervalS + SceneType * EventType + (1 + SceneType + EventType|Subject), .)
#summary(intervalsLmer)
tab_model(intervalsOutLmer, p.val="wald", file="intervalsOutLmer.html")# We have to save the table in html format.
htmltools::includeHTML("intervalsOutLmer.html") #And include it later - not needed for html_document type, only for notebook
#with(subset(rawdata, isPracticeBlock==F), table(sceneId, blockNo, subject)) #is each scene used only once within a block? seems so..
#with(subset(rawdata, isPracticeBlock==F), table(sceneId, interval, subject)) #is interval assigned to scenes randomly? usually just two different intervals per scene..
#with(subset(rawdata, isPracticeBlock==F), table(sceneId, subject)) #how often is a scene used per subject?
#with(subset(rawdata, isPracticeBlock==F), table(sceneId)) how often is scene used in general? seems uniform
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=ObjectsCount, y=Interval)) + geom_bin2d() + scale_y_continuous(breaks=c(150, 350, 550, 750)) + scale_x_continuous(breaks=5:12) +
scale_fill_gradientn(colours=rainbow(4))
#with(data, table(ObjectsCount, Interval)) #seems random, although far from uniformly random
#with(data, cor.test(ObjectsCount, Interval)) #tiny negative correlation
data %>% ggplot(., aes(x=ObjectsCount)) + geom_bar() + facet_grid(~as.factor(Interval))
data %>% ggplot(., aes(x=Interval)) + geom_bar() + facet_grid(~as.factor(ObjectsCount))
with(data, cor.test(ObjectsCount, Interval))
objint.lm <- lm(ObjectsCount ~ Interval + I(Interval^2) + I(Interval^3), data)
summary(objint.lm)
data %>% ggplot(., aes(x=ObjectsError, linetype=SceneType, color=EventType)) +
facet_wrap(~Subject) + geom_freqpoly(bins=5) #geom_density(alpha=0.3)
data %>% group_by(Subject, ObjectsCount) %>%
summarise(N = n(), meanObjectsError = mean(ObjectsError), medianObjectsError = median(ObjectsError)) %>%
ggplot(., aes(y=meanObjectsError, x=as.factor(ObjectsCount))) + geom_violin()
objErrors <- data %>% group_by(Subject, SceneType, EventType) %>%
summarize(NTrials = n(), ObjectsErrorMean = mean(ObjectsError), ObjectsErrorMedian = median(ObjectsError), ObjectsErrorAbsMean = mean(abs(ObjectsError)), ObjectsErrorSD = sd(ObjectsError), ObjectsErrorCor = cor(ObjectsCount,ObjectsResp))
# Accuracy
objErrors %>%  ggplot(., aes(y=ObjectsErrorMean, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
# Precision
objErrors %>%  ggplot(., aes(y=ObjectsErrorSD, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
# Correlation, discrimination
objErrors %>%  ggplot(., aes(y=ObjectsErrorCor, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
objectsLmer <- as.data.frame(data) %>% lmer(ObjectsError ~ ObjectsCount + SceneType * EventType + (1+ObjectsCount + SceneType + EventType|Subject), .)
#random interaction fails to converge
#summary(objectsLmer)
tab_model(objectsLmer, file="objectsLmer.html")# We have to save the table in html format.
htmltools::includeHTML("objectsLmer.html") #And include it later, not needed for html_document type, only for notebook
# Precision
intErrors %>%  ggplot(., aes(y=IntervalErrorSD, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
# Correlation, discrimination
intErrors %>%  ggplot(., aes(y=IntervalErrorCor, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
data %>% ggplot(., aes(x=IntervalLogRT, linetype=SceneType, color=EventType)) +
facet_wrap(~Subject) + geom_density(alpha=0.3)#geom_freqpoly(bins=5) #
intRTs <- data %>% group_by(Subject, SceneType, EventType) %>%
summarize(NTrials = n(), IntervalLogRTMean = mean(IntervalLogRT), IntervalLogRTSD = sd(IntervalLogRT))
# Mean
intRTs %>%  ggplot(., aes(y=IntervalLogRTMean, x=SceneType)) + geom_boxplot() + facet_grid(.~EventType)
# Variability
intRTs %>%  ggplot(., aes(y=IntervalLogRTSD, x=SceneType)) + geom_boxplot() + facet_grid(.~EventType)
intervalRTLmer <- as.data.frame(data) %>% lmer(IntervalLogRT ~ ObjectsCount + Interval + SceneType * EventType + (1+SceneType + EventType|Subject), .)
#summary(intervalRTLmer)
tab_model(intervalRTLmer, file="intervalRTLmer.html", p.val="wald", digits.est=5, digits.ci=5)# We have to save the table in html format.
intervalRTLmer <- as.data.frame(data) %>% lmer(IntervalLogRT ~ ObjectsCount + Interval + SceneType * EventType + (1+SceneType + EventType|Subject), .)
#summary(intervalRTLmer)
tab_model(intervalRTLmer, file="intervalRTLmer.html", p.val="wald", digits=5, digits.p=5)# We have to save the table in html format.
htmltools::includeHTML("intervalRTLmer.html") #And include it later, not needed for html_document type, only for notebook
intervalRTLmer <- as.data.frame(data) %>% lmer(IntervalLogRT ~ ObjectsCount + Interval + SceneType * EventType + (1+SceneType + EventType|Subject), .)
#summary(intervalRTLmer)
tab_model(intervalRTLmer, file="intervalRTLmer.html", p.val="wald", digits=5)# We have to save the table in html format.
htmltools::includeHTML("intervalRTLmer.html") #And include it later, not needed for html_document type, only for notebook
intervalRTLmer <- as.data.frame(data) %>% lmer(IntervalLogRT ~ ObjectsCount + Interval + SceneType * EventType + (1+SceneType + EventType|Subject), .)
#summary(intervalRTLmer)
tab_model(intervalRTLmer, file="intervalRTLmer.html", p.val="wald", digits=5)# We have to save the table in html format.
htmltools::includeHTML("intervalRTLmer.html") #And include it later, not needed for html_document type, only for notebook
lmer_second_half_of_blocks <- data %>% filter(TrialBlock >= 11) %>%
lmer(IntervalError ~ IntervalS + SceneType * EventType + (1+IntervalS + SceneType + EventType|Subject), .)
#summary(lmer_second_half_of_blocks)
tab_model(lmer_second_half_of_blocks, p.val="wald", file="lmer_second_half_of_blocks.html")  # We have to save the table in html format.
htmltools::includeHTML("lmer_second_half_of_blocks.html")  #And include it later - not needed for html_document type, only for notebook
# Influence of starting with 2D vs 3D
lmer_groups_scene <- data %>% lmer(IntervalError ~ IntervalS + SceneType * EventType * FirstSceneType + (1+IntervalS + SceneType + EventType|Subject), .)
summary(lmer_groups_scene)
# Start with 2D
lmer_groups_scene_2D <- data %>% lmer(IntervalError ~ IntervalS + SceneType * EventType + (1+IntervalS + SceneType + EventType|Subject), .,
subset = FirstSceneType=="2D" )
summary(lmer_groups_scene_2D)
# Start with 3D
lmer_groups_scene_3D <- data %>% lmer(IntervalError ~ IntervalS + SceneType * EventType + (1+IntervalS + SceneType + EventType|Subject), .,
subset = FirstSceneType=="3D" )
summary(lmer_groups_scene_3D)
# First level aggregation, over trials
intErrorsScene <- data %>% group_by(Subject, SceneType, EventType, FirstSceneTypeGraph) %>%
summarize(NTrials = n(), IntervalErrorMean = mean(IntervalError), IntervalErrorMedian = median(IntervalError), IntervalErrorAbsMean = mean(abs(IntervalError)), IntervalErrorSD = sd(IntervalError), IntervalErrorCor = cor(Interval,IntervalResp))
# Second level aggregation, over subjects
intErrorsScene.agg <- intErrorsScene %>% group_by(SceneType, EventType, FirstSceneTypeGraph) %>%
summarise(NSubjects = n(), MeanMeanIntervalError = mean(IntervalErrorMean), MeanMedianIntervalError = mean(IntervalErrorMedian),
SDMeanIntervalError = sd(IntervalErrorMean)) %>%
mutate(SEMMeanIntervalError = SDMeanIntervalError / sqrt(NSubjects),
CIMeanIntervalError = SEMMeanIntervalError * abs(qt((1-0.95)/2, NSubjects-1))
)
# Plot interval estimation accuracy per conditions
dodge1 <- position_dodge(width=1)
plot_intErrorScene <- intErrorsScene %>%
ggplot(., aes(y=IntervalErrorMean, x=EventType, color=SceneType, group=interaction(SceneType, EventType))) +
geom_violin(draw_quantiles = c(0.5), scale="count", data=intErrorsScene, position=dodge1) +
#facet_grid(.~EventType) +
geom_point(aes(y=MeanMeanIntervalError), size = 2, color="black", data = intErrorsScene.agg, position=dodge1) +
geom_errorbar(aes(y=MeanMeanIntervalError, ymin=MeanMeanIntervalError-CIMeanIntervalError, ymax=MeanMeanIntervalError+CIMeanIntervalError), width = 0.2, color="black", data = intErrorsScene.agg, position=dodge1) +  # it says error bar has no y easthetic but without it it throws a different error..
facet_grid(.~FirstSceneTypeGraph) +
ylab("Mean Interval estimation error (ms)")
ggsave("plot_intErrorScene.png", plot_intErrorScene, dpi=300, width=15, height=12, units = "cm")
plot_intErrorScene
intErrorsScene.EventDiff <- intErrorsScene %>% select(Subject, SceneType, EventType, FirstSceneTypeGraph, IntervalErrorMean) %>%
unite(ID, Subject, SceneType, FirstSceneTypeGraph, sep = ";") %>%
spread(key=EventType, value=IntervalErrorMean) %>%
mutate(AgencySize = Control-Action) %>%
separate(ID, c("Subject", "SceneType", "FirstSceneTypeGraph"), sep = ";")
intErrorsScene.EventDiff.agg <- intErrorsScene.EventDiff %>% group_by(SceneType, FirstSceneTypeGraph) %>%
summarise(NSubjects = n(), MeanAgencySize = mean(AgencySize),
SDAgencySize = sd(AgencySize)) %>%
mutate(SEMAgencySize = SDAgencySize / sqrt(NSubjects),
CIAgencySize = SEMAgencySize * abs(qt((1-0.95)/2, NSubjects-1)))
plot_intErrorSceneEventDiff <- intErrorsScene.EventDiff %>%
ggplot(., aes(y=AgencySize, x=SceneType, color=SceneType, group=SceneType)) +
geom_violin(draw_quantiles = c(0.5), scale="count", data=intErrorsScene.EventDiff, position=dodge1) +
#facet_grid(.~EventType) +
geom_point(aes(y=MeanAgencySize), size = 2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +
#geom_line(aes(y=MeanAgencySize), size = 2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +
geom_errorbar(aes(y=MeanAgencySize, ymin=MeanAgencySize-CIAgencySize, ymax=MeanAgencySize+CIAgencySize), width = 0.2, color="black", data = intErrorsScene.EventDiff.agg, position=dodge1) +  # it says error bar has no y easthetic but without it it throws a different error..
facet_grid(.~FirstSceneTypeGraph) +
ylab("Agency size (Control-Action) [ms]")
ggsave("plot_intErrorSceneEventDiff.png", plot_intErrorSceneEventDiff, dpi=300, width=15, height=12, units = "cm")
plot_intErrorSceneEventDiff
# influence of Starting with Action vs Vibration
lmer_groups_event <- data %>% lmer(IntervalError ~ IntervalS + SceneType * EventType * FirstEventType + (1+IntervalS + SceneType + EventType|Subject), .)
summary(lmer_groups_event)
lmer_second_half_of_blocks <- data %>% filter(TrialBlock >= 11) %>%
lmer(IntervalError ~ IntervalS + SceneType * EventType + (1+IntervalS + SceneType + EventType|Subject), .)
#summary(lmer_second_half_of_blocks)
tab_model(lmer_second_half_of_blocks, p.val="wald", file="lmer_second_half_of_blocks.html")  # We have to save the table in html format.
htmltools::includeHTML("lmer_second_half_of_blocks.html")  #And include it later - not needed for html_document type, only for notebook
# Influence of starting with 2D vs 3D
lmer_groups_scene <- data %>% lmer(IntervalError ~ IntervalS + SceneType * EventType * FirstSceneType + (1+IntervalS + SceneType + EventType|Subject), .)
summary(lmer_groups_scene)
tab_model(lmer_groups_scene, p.val="wald", file="lmer_groups_scene.html")  # We have to save the table in html format.
htmltools::includeHTML("lmer_groups_scene.html")
# Influence of starting with 2D vs 3D
lmer_groups_scene <- data %>% lmer(IntervalError ~ IntervalS + SceneType * EventType * FirstSceneType + (1+IntervalS + SceneType + EventType|Subject), .)
#summary(lmer_groups_scene)
tab_model(lmer_groups_scene, p.val="wald", file="lmer_groups_scene.html")  # We have to save the table in html format.
htmltools::includeHTML("lmer_groups_scene.html")
# Influence of starting with 2D vs 3D
lmer_groups_scene <- data %>% lmer(IntervalError ~ IntervalS + SceneType * EventType * FirstSceneType + (1+IntervalS + SceneType * EventType|Subject), .)
#summary(lmer_groups_scene)
tab_model(lmer_groups_scene, p.val="wald", file="lmer_groups_scene.html")  # We have to save the table in html format.
htmltools::includeHTML("lmer_groups_scene.html")
