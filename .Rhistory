library(tidyverse)
datapath <- file.path(getwd(), "..", "Data", "Main")
datapath
### Read data ####
datafiles <- list.files(datapath)
datafiles
plot(cars)
library(tidyverse)
library(tidyverse)
datapath <- file.path(getwd(), "..", "Data", "Main")
datafilepattern <- "BildAkt.*\.csv"
datapath <- file.path(getwd(), "..", "Data", "Main")
datafilepattern <- "BildAkt.*\\.csv"
datafiles <- list.files(datapath, datafilepattern)
rawdata <- read_csv2()
datafiles
datafiles <- list.files(datapath, datafilepattern)
datafiles
rawdata <- read_csv2(datafiles)
datafiles <- list.files(datapath, datafilepattern, full.names = T)
datafiles
rawdata <- lapply(datafiles, read_csv2)
View(rawdata)
rawdata <- do.call(rbind, lapply(datafiles, read_csv2))
View(rawdata)
datafiles <- list.files(datapath, datafilepattern, full.names = T)
rawdata <- do.call(rbind, lapply(datafiles, read_csv2)) ## read all files and combine them into one tibble
View(rawdata)
library(tidyverse)
datapath <- file.path(getwd(), "..", "Data", "Main")
datafilepattern <- "BildAkt.*\\.csv"
datafiles <- list.files(datapath, datafilepattern, full.names = T)
rawdata <- do.call(rbind, lapply(datafiles, read_csv2)) ## read all files and combine them into one tibble
datafiles <- list.files(datapath, datafilepattern, full.names = T)
rawdata <- do.call(rbind, lapply(datafiles, read_csv2)) ## read all files and combine them into one tibble
library(forcats)
rawdata %>% mutate(firstSceneType = parse_factor(c("3D", "2D")))
rawdata %>% mutate(firstSceneType = parse_factor(firstSceneType, c("3D", "2D")))
rawdata %>% mutate(firstSceneType = parse_factor(firstSceneType, c("3D", "2D")),
firstEventType = parse_factor(firstEventType, c("Action", "Control")))
rawdata %>% mutate(firstSceneType = parse_factor(firstSceneType, c("3D", "2D")),
firstEventType = parse_factor(firstEventType, c("Action", "Control")),
isPracticeBlock = as.logical(isPracticeBlock),
sceneType = parse_factor(setupType, c("3D", "2D")),
eventType = parse_factor(eventType, c("Action", "Control")))
rawdata <- rawdata %>% mutate(firstSceneType = parse_factor(firstSceneType, c("3D", "2D")),
firstEventType = parse_factor(firstEventType, c("Action", "Control")),
isPracticeBlock = as.logical(isPracticeBlock),
sceneType = parse_factor(setupType, c("3D", "2D")),
eventType = parse_factor(eventType, c("Action", "Control")))
data <- rawdata %>% select(Subject = subject,
Session = session)
View(data)
data <- rawdata %>% filter(isPracticeBlock == FALSE) %>%
select(Subject = subject,
Session = session,
FirstSceneType = firstSceneType,
FirstEventType = FirstEventType,
Block = blockNo,
SceneType = sceneType,
EventType = eventType,
Trial = trialNoInBlock,
TrialTotal = trialNoTotal,
Objects = noObjects,
ObjectsResp = responseObjectsNo,
Interval = interval,
IntervalResp = responseInterval,
TSObjectsResp = responseObjectsTimestamp,
TSEvent = eventTimestamp,
TSTone = toneTimestamp,
TSIntervalResp = responseIntervalTimestamp
)
data <- rawdata %>% filter(isPracticeBlock == FALSE) %>%
select(Subject = subject,
Session = session,
FirstSceneType = firstSceneType,
FirstEventType = firstEventType,
Block = blockNo,
SceneType = sceneType,
EventType = eventType,
Trial = trialNoInBlock,
TrialTotal = trialNoTotal,
Objects = noObjects,
ObjectsResp = responseObjectsNo,
Interval = interval,
IntervalResp = responseInterval,
TSObjectsResp = responseObjectsTimestamp,
TSEvent = eventTimestamp,
TSTone = toneTimestamp,
TSIntervalResp = responseIntervalTimestamp
)
View(data)
data <- data %>% mutate(#TODO: ObjectsRT = TSObjectsResp - TSTrialOnset,
ObjectError = ObjectsResp - Objects,
IntervalError = IntervalResp - Interval,
IntervalRT = TSIntervalResp - (TSTone + Interval)) #verify that it makes sense
data <- rawdata %>% filter(isPracticeBlock == FALSE) %>%
select(Subject = subject,
Session = session,
FirstSceneType = firstSceneType,
FirstEventType = firstEventType,
Block = blockNo,
SceneType = sceneType,
EventType = eventType,
Trial = trialNoInBlock,
TrialTotal = trialNoTotal,
Objects = noObjects,
ObjectsResp = responseObjectsNo,
Interval = interval,
IntervalResp = responseInterval,
# TODO: add TSTrialOnset
TSObjectsResp = responseObjectsTimestamp,
TSEvent = eventTimestamp,
TSTone = toneTimestamp, ##TSTone is recorded when sending the command playDelayed to produce the tone after a specified interval, so tone in fact occurs later, at an uknown time, but roughly TSTone + Interval
TSIntervalResp = responseIntervalTimestamp
) %>% mutate(#TODO: ObjectsRT = TSObjectsResp - TSTrialOnset,
ObjectError = ObjectsResp - Objects,
IntervalError = IntervalResp - Interval,
IntervalRT = TSIntervalResp - (TSEvent + Interval)) #verify that it makes sense
datafiles <- list.files(datapath, datafilepattern, full.names = T)
rawdata <- do.call(rbind, lapply(datafiles, read_csv2)) ## read all files and combine them into one tibble
rawdata <- rawdata %>% mutate(firstSceneType = parse_factor(firstSceneType, c("3D", "2D")),
firstEventType = parse_factor(firstEventType, c("Action", "Control")),
isPracticeBlock = as.logical(isPracticeBlock),
sceneType = parse_factor(setupType, c("3D", "2D")),
eventType = parse_factor(eventType, c("Action", "Control")))
default_locale()
loc <- default_locale()
loc$decimal_mark
library("readr", lib.loc="~/R/win-library/3.4")
datafiles <- list.files(datapath, datafilepattern, full.names = T)
rawdata <- do.call(rbind, lapply(datafiles, read_csv, delim=";")) ## read all files and combine them into one tibble
datafiles <- list.files(datapath, datafilepattern, full.names = T)
read_custom <- function(file){
read_csv(file, delim=';')
}
rawdata <- do.call(rbind, lapply(datafiles, read_custom)) ## read all files and combine them into one tibble
datafiles <- list.files(datapath, datafilepattern, full.names = T)
rawdata <- do.call(rbind, lapply(datafiles, read_delim, delim=";")) ## read all files and combine them into one tibble
rawdata <- rawdata %>% mutate(firstSceneType = parse_factor(firstSceneType, c("3D", "2D")),
firstEventType = parse_factor(firstEventType, c("Action", "Control")),
isPracticeBlock = as.logical(isPracticeBlock),
sceneType = parse_factor(setupType, c("3D", "2D")),
eventType = parse_factor(eventType, c("Action", "Control")))
data <- rawdata %>% filter(isPracticeBlock == FALSE) %>%
select(Subject = subject,
Session = session,
FirstSceneType = firstSceneType,
FirstEventType = firstEventType,
Block = blockNo,
SceneType = sceneType,
EventType = eventType,
Trial = trialNoInBlock,
TrialTotal = trialNoTotal,
Objects = noObjects,
ObjectsResp = responseObjectsNo,
Interval = interval,
IntervalResp = responseInterval,
# TODO: add TSTrialOnset
TSObjectsResp = responseObjectsTimestamp,
TSEvent = eventTimestamp,
TSTone = toneTimestamp, ##TSTone is recorded when sending the command playDelayed to produce the tone after a specified interval, so tone in fact occurs later, at an uknown time, but roughly TSTone + Interval
TSIntervalResp = responseIntervalTimestamp
) %>% mutate(#TODO: ObjectsRT = TSObjectsResp - TSTrialOnset,
ObjectError = ObjectsResp - Objects,
IntervalError = IntervalResp - Interval,
IntervalRT = TSIntervalResp - (TSEvent + Interval)) #verify that it makes sense
data <- rawdata %>% filter(isPracticeBlock == FALSE) %>%
select(Subject = subject,
Session = session,
FirstSceneType = firstSceneType,
FirstEventType = firstEventType,
Block = blockNo,
SceneType = sceneType,
EventType = eventType,
Trial = trialNoInBlock,
TrialTotal = trialNoTotal,
Objects = noObjects,
ObjectsResp = responseObjectsNo,
Interval = interval,
IntervalResp = responseInterval,
# TODO: add TSTrialOnset
TSObjectsResp = responseObjectsTimestamp,
TSEvent = eventTimestamp,
TSTone = toneTimestamp, ##TSTone is recorded when sending the command playDelayed to produce the tone after a specified interval, so tone in fact occurs later, at an uknown time, but roughly TSTone + Interval
TSIntervalResp = responseIntervalTimestamp
) %>% mutate(#TODO: ObjectsRT = TSObjectsResp - TSTrialOnset,
ObjectError = ObjectsResp - Objects,
IntervalError = IntervalResp - Interval,
IntervalRT = TSIntervalResp - (TSTone + Interval),
IntervalRT2 = TSIntervalResp - (TSEvent + Interval)) #verify that it makes sense
datafiles <- list.files(datapath, datafilepattern, full.names = T)
rawdata <- do.call(rbind, lapply(datafiles, read_delim, delim=";")) ## read all files and combine them into one tibble
rawdata <- rawdata %>% mutate(firstSceneType = parse_factor(firstSceneType, c("3D", "2D")),
firstEventType = parse_factor(firstEventType, c("Action", "Control")),
isPracticeBlock = as.logical(isPracticeBlock),
sceneType = parse_factor(setupType, c("3D", "2D")),
eventType = parse_factor(eventType, c("Action", "Control")))
library(tidyverse)
library(forcats)
datapath <- file.path(getwd(), "..", "Data", "Main")
datafilepattern <- "BildAkt.*\\.csv"
datafiles <- list.files(datapath, datafilepattern, full.names = T)
rawdata <- do.call(rbind, lapply(datafiles, read_delim, delim=";")) ## read all files and combine them into one tibble
rawdata <- rawdata %>% mutate(firstSceneType = parse_factor(firstSceneType, c("3D", "2D")),
firstEventType = parse_factor(firstEventType, c("Action", "Control")),
isPracticeBlock = as.logical(isPracticeBlock),
sceneType = parse_factor(setupType, c("3D", "2D")),
eventType = parse_factor(eventType, c("Action", "Control")))
data <- rawdata %>% filter(isPracticeBlock == FALSE) %>%
select(Subject = subject,
Session = session,
FirstSceneType = firstSceneType,
FirstEventType = firstEventType,
Block = blockNo,
SceneType = sceneType,
EventType = eventType,
Trial = trialNoInBlock,
TrialTotal = trialNoTotal,
Objects = noObjects,
ObjectsResp = responseObjectsNo,
Interval = interval,
IntervalResp = responseInterval,
# TODO: add TSTrialOnset
TSObjectsResp = responseObjectsTimestamp,
TSEvent = eventTimestamp,
TSTone = toneTimestamp, ##TSTone is recorded when sending the command playDelayed to produce the tone after a specified interval, so tone in fact occurs later, at an uknown time, but roughly TSTone + Interval
TSIntervalResp = responseIntervalTimestamp
) %>% mutate(#TODO: ObjectsRT = TSObjectsResp - TSTrialOnset,
ObjectError = ObjectsResp - Objects,
IntervalError = IntervalResp - Interval,
IntervalRT = TSIntervalResp - (TSTone + Interval),
IntervalRT2 = TSIntervalResp - (TSEvent + Interval)) #verify that it makes sense
table(rawdata$sceneId, rawdata$blockNo)
table(rawdata$sceneId, rawdata$blockNo, rawdata$subject)
with(subset(rawdata, isPracticeBlock==F), table(sceneId, blockNo, subject))
with(subset(rawdata, isPracticeBlock==F), table(sceneId, interval, subject))
with(subset(rawdata, isPracticeBlock==F), table(sceneId, subject))
data <- rawdata %>% filter(isPracticeBlock == FALSE) %>%
select(Subject = subject,
Session = session,
FirstSceneType = firstSceneType,
FirstEventType = firstEventType,
Block = blockNo,
SceneType = sceneType,
EventType = eventType,
Trial = trialNoInBlock,
TrialTotal = trialNoTotal,
Objects = noObjects,
ObjectsResp = responseObjectsNo,
Interval = interval,
IntervalResp = responseInterval,
# TODO: add TSTrialOnset
TSObjectsResp = responseObjectsTimestamp,
TSEvent = eventTimestamp,
TSTone = toneTimestamp, ##TSTone is recorded when sending the command playDelayed to produce the tone after a specified interval, so tone in fact occurs later, at an uknown time, but roughly TSTone + Interval
TSIntervalResp = responseIntervalTimestamp
) %>% mutate(#TODO: ObjectsRT = TSObjectsResp - TSTrialOnset,
ObjectError = ObjectsResp - Objects,
IntervalError = IntervalResp - Interval,
IntervalRT = TSIntervalResp - (TSTone + Interval),
IntervalRT2 = TSIntervalResp - (TSEvent + Interval)) #verify that it makes sense
data #preview
data %>% ggplot(., aes(y=ObjectError, x=SceneType)) +
geom_boxplot() +
facet_grid(.~EventType)
data %>% group_by(SceneType, EventType) %>% summarize(medObjectError = median(ObjectError)) %>%
ggplot(., aes(y=ObjectError, x=SceneType)) +
geom_boxplot() +
facet_grid(.~EventType)
data %>% group_by(SceneType, EventType) %>% summarize(medObjectError = median(ObjectError)) %>%
ggplot(., aes(y=medObjectError, x=SceneType)) +
geom_boxplot() +
facet_grid(.~EventType)
data %>% group_by(SceneType, EventType) %>% summarize(medObjectError = median(ObjectError))
data %>% group_by(Subject, SceneType, EventType) %>% summarize(medObjectError = median(ObjectError))
objErrors <- data %>% group_by(Subject, SceneType, EventType) %>%
summarize(ObjectErrorMean = mean(ObjectError), ObjectErrorSD = sd(ObjectError), ObjectErrorCor = cor(Objects,ObjectsResp))
objErrors
objErrors <- data %>% group_by(Subject, SceneType, EventType) %>%
summarize(NTrials = n(), ObjectErrorMean = mean(ObjectError), ObjectErrorMedian = median(ObjectError), ObjectErrorAbsMean = mean(abs(ObjectError)), ObjectErrorSD = sd(ObjectError), ObjectErrorCor = cor(Objects,ObjectsResp))
objErrors
objErrors %>%  ggplot(., aes(y=ObjectErrorMean, x=SceneType)) +
geom_boxplot() +
facet_grid(.~EventType)
# numbers of objects are being underestimated in 2D scenes
# Precision
objErrors %>%  ggplot(., aes(y=ObjectErrorSD, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
# Correlation, discrimination
objErrors %>%  ggplot(., aes(y=ObjectErrorCor, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
library(tidyverse)
library(forcats)
library(lme4)
library(lmerTest)
objectsLmer <- lmer(ObjectsError ~ Objects, SceneType, EventType, scale(TrialTotal) + (1|Subject), data)
objectsLmer <- lmer(ObjectsError ~ Objects, SceneType, EventType, TrialTotal + (1|Subject), data)
data$TrialTotal
objectsLmer <- lmer(ObjectsError ~ Objects, SceneType, EventType + (1|Subject), data)
objectsLmer <- lmer(ObjectsError ~ Objects, SceneType, EventType + (1|Subject), data = data)
objectsLmer <- lmer(ObjectsError ~ Objects, SceneType, EventType + (1|Subject), data = as.data.frame(data))
objectsLmer <- as.data.frame(data) %>% lmer(ObjectsError ~ Objects, SceneType, EventType + (1|Subject))
objectsLmer <- data %>% lmer(ObjectsError ~ Objects + SceneType + EventType + scale(TrialTotal) + (1|Subject))
objectsLmer <- data %>% lmer(ObjectsError ~ Objects + SceneType + EventType + scale(TrialTotal) + (1|Subject), .)
library(tidyverse)
library(forcats)
library(lme4)
library(lmerTest)
datapath <- file.path(getwd(), "..", "Data", "Main")
datafilepattern <- "BildAkt.*\\.csv"
datafiles <- list.files(datapath, datafilepattern, full.names = T)
rawdata <- do.call(rbind, lapply(datafiles, read_delim, delim=";")) # read all files and combine them into one tibble
rawdata <- rawdata %>% mutate(firstSceneType = parse_factor(firstSceneType, c("3D", "2D")),
firstEventType = parse_factor(firstEventType, c("Action", "Control")),
isPracticeBlock = as.logical(isPracticeBlock),
sceneType = parse_factor(setupType, c("3D", "2D")),
eventType = parse_factor(eventType, c("Action", "Control")))
data <- rawdata %>% filter(isPracticeBlock == FALSE) %>%
select(Subject = subject,
Session = session,
FirstSceneType = firstSceneType,
FirstEventType = firstEventType,
Block = blockNo,
SceneType = sceneType,
EventType = eventType,
Trial = trialNoInBlock,
TrialTotal = trialNoTotal,
Objects = noObjects,
ObjectsResp = responseObjectsNo,
Interval = interval,
IntervalResp = responseInterval,
# TODO: add TSTrialOnset
TSObjectsResp = responseObjectsTimestamp,
TSEvent = eventTimestamp,
TSTone = toneTimestamp, ##TSTone is recorded when sending the command playDelayed to produce the tone after a specified interval, so tone in fact occurs later, at an uknown time, but roughly TSTone + Interval
TSIntervalResp = responseIntervalTimestamp
) %>% mutate(#TODO: ObjectsRT = TSObjectsResp - TSTrialOnset,
ObjectsError = ObjectsResp - Objects,
IntervalError = IntervalResp - Interval,
IntervalRT = TSIntervalResp - (TSTone + Interval),
IntervalRT2 = TSIntervalResp - (TSEvent + Interval)) #verify that it makes sense
data #preview
with(subset(rawdata, isPracticeBlock==F), table(sceneId, blockNo, subject)) #is each scene used only once within a block? seems so..
with(subset(rawdata, isPracticeBlock==F), table(sceneId, interval, subject)) #is interval assigned to scenes randomly? usually just two different intervals per scene..
with(subset(rawdata, isPracticeBlock==F), table(sceneId, subject)) #how often is a scene used per subject?
objErrors <- data %>% group_by(Subject, SceneType, EventType) %>%
summarize(NTrials = n(), ObjectsErrorMean = mean(ObjectsError), ObjectsErrorMedian = median(ObjectsError), ObjectsErrorAbsMean = mean(abs(ObjectsError)), ObjectsErrorSD = sd(ObjectsError), ObjectsErrorCor = cor(Objects,ObjectsResp))
# Accuracy
objErrors %>%  ggplot(., aes(y=ObjectsErrorMean, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
# numbers of objects are being underestimated in 2D scenes
# Precision
objErrors %>%  ggplot(., aes(y=ObjectsErrorSD, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
# Correlation, discrimination
objErrors %>%  ggplot(., aes(y=ObjectsErrorCor, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
objectsLmer <- data %>% lmer(ObjectsError ~ Objects + SceneType + EventType + scale(TrialTotal) + (1|Subject), .)
summary(objectsLmer)
objectsLmer <- data %>% lmer(ObjectsError ~ Objects + SceneType + EventType + (1|Subject), .)
summary(objectsLmer)
objectsLmer <- as.data.frame(data) %>% lmer(ObjectsError ~ Objects + SceneType + EventType + (1|Subject), .)
summary(objectsLmer)
objectsLmer <- as.data.frame(data) %>% lmer(ObjectsError ~ Objects + SceneType * EventType + (1|Subject), .)
summary(objectsLmer)
objectsLmer <- as.data.frame(data) %>% lmer(ObjectsError ~ Objects + SceneType * EventType + (1+Objects + SceneType * EventType|Subject), .)
summary(objectsLmer)
objectsLmer <- as.data.frame(data) %>% lmer(ObjectsError ~ Objects + SceneType * EventType + (1+Objects + SceneType + EventType|Subject), .)
summary(objectsLmer)
#random interaction fails to converge
#summary(objectsLmer)
library(xtable)
print(xtable(summary(objectsLmer)),type='html')
#random interaction fails to converge
#summary(objectsLmer)
#library(xtable)
#print(xtable(summary(objectsLmer)),type='html')
library(sjmisc)
library(sjPlot)
objectsLmer %>% sjt.lm(no.output = TRUE, show.se = TRUE)
objectsLmer %>% sjt.lm(no.output = TRUE, show.se = TRUE) %>%
return() %>% .[["knitr"]] %>% asis_output
#objectsLmer %>% sjt.lm(no.output = TRUE, show.se = TRUE) %>%
#       return() %>% .[["knitr"]] %>% asis_output
sjt.lm(objectsLmer, file="output.html")# You have to save the table in html format.
htmltools::includeHTML("output.html")
#objectsLmer %>% sjt.lm(no.output = TRUE, show.se = TRUE) %>%
#       return() %>% .[["knitr"]] %>% asis_output
sjt.lmer(objectsLmer, file="output.html")# You have to save the table in html format.
htmltools::includeHTML("output.html")
intErrors <- data %>% group_by(Subject, SceneType, EventType) %>%
summarize(NTrials = n(), IntervalErrorMean = mean(IntervalError), IntervalErrorMedian = median(IntervalError), IntervalErrorAbsMean = mean(abs(IntervalError)), IntervalErrorSD = sd(IntervalError), IntervalErrorCor = cor(Interval,IntervalResp))
intErrors
# Accuracy
intErrors %>%  ggplot(., aes(y=IntervalErrorMean, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
# numbers of Interval are being underestimated in 2D scenes
# Precision
intErrors %>%  ggplot(., aes(y=IntervalErrorSD, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
# Correlation, discrimination
intErrors %>%  ggplot(., aes(y=IntervalErrorCor, x=SceneType)) +
geom_boxplot() + facet_grid(.~EventType)
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Interval, y=Objects)) +geom_bin2d()
with(data, table(Objects, Interval))
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Interval, y=Objects)) +geom_bin2d()
with(data, cor.test(Objects, Interval))
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Interval, y=Objects)) +geom_bin2d()
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Interval, y=Objects)) + geom_bin2d() + scale_x_continuous(breaks=c(150, 350, 550, 750))
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Interval, y=Objects)) + geom_bin2d(size=3) + scale_x_continuous(breaks=c(150, 350, 550, 750))
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Interval, y=Objects)) + geom_bin2d(size=5) + scale_x_continuous(breaks=c(150, 350, 550, 750))
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Interval, y=Objects)) + geom_bin2d(aes(size=5)) + scale_x_continuous(breaks=c(150, 350, 550, 750))
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Interval, y=Objects)) + geom_bin2d() + scale_x_continuous(breaks=c(150, 350, 550, 750))
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Interval, y=Objects)) + geom_bin2d() + scale_x_continuous(breaks=c(150, 350, 550, 750)) + scale_y_continuous(breaks=6:15)
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Objects, y=Interval)) + geom_bin2d() + scale_y_continuous(breaks=c(150, 350, 550, 750)) + scale_x_continuous(breaks=6:15)
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Objects, y=Interval)) + geom_bin2d() + scale_y_continuous(breaks=c(150, 350, 550, 750)) + scale_x_continuous(breaks=6:15) +
scale_fill_gradientn(limits=c(0,50), breaks=seq(0, 40, by=10), colours=rainbow(4))
#are different intervals equally distributed with object numbers?
data %>% ggplot(., aes(x=Objects, y=Interval)) + geom_bin2d() + scale_y_continuous(breaks=c(150, 350, 550, 750)) + scale_x_continuous(breaks=6:15) +
scale_fill_gradientn(colours=rainbow(4))
with(data, cor.test(Objects, Interval)) #tiny negative correlation
